{"ast":null,"code":"/**\n * A set of monkey-patched Array helpers.\n * Probably a bad idea to use these in a real production environment.\n * Monkey-patching is confusing to anyone seeing the project for the first\n * time (or coming back to it after a few weeks).\n * That said, this is a simple demo project, so what the hell, let's break\n * some rules =D\n *//**\n * Array.prototype.swap\n * Rearrange an array to swap the positions of two elements.\n * @param {Number} a - the index of the first element to swap.\n * @param {Number} b - the index of the second element to swap.\n * @returns {Array}\n * @example\n * // returns [ 'a', 'c', 'b' ]\n * [ 'a', 'b', 'c' ].swap(1, 2)\n */// eslint-disable-next-line no-extend-native\nArray.prototype.swap=function(a,b){if(b>=this.length||b<0)return this;// Temporary variable to hold data while we juggle\nlet temp=this[a];this[a]=this[b];this[b]=temp;return this;};/**\n * Array.range\n * Create a new array of length n, where the elements are numbers\n * from 0 to n - 1.\n * @param {Number} n - the desired length of the range.\n * @returns {Array}\n * @example\n * // returns [ 0, 1, 2, 3 ]\n * Array.range(4);\n */Array.range=n=>Array.from(new Array(n),(x,i)=>i);/**\n * Array.matrix\n * Create a new two-dimensional array, where each element is its own index.\n * @param {Number} x - the desired number of columns (possible x values)\n * @param {Number} y - the desired number of rows (possible y values)\n * @returns {Array}\n * @example\n * // returns [\n * //   [ 0, 1, 2 ],\n * //   [ 0, 1, 2 ]\n * // ]\n * Array.matrix(3, 2);\n */Array.matrix=(x,y)=>{const rows=Array.range(y);const columns=Array.range(x);return rows.map((row,i)=>columns.slice());};","map":{"version":3,"names":["Array","prototype","swap","a","b","length","temp","range","n","from","x","i","matrix","y","rows","columns","map","row","slice"],"sources":["/Users/amit/Desktop/Algoverse-main/src/helpers/array_helpers.js"],"sourcesContent":["/**\n * A set of monkey-patched Array helpers.\n * Probably a bad idea to use these in a real production environment.\n * Monkey-patching is confusing to anyone seeing the project for the first\n * time (or coming back to it after a few weeks).\n * That said, this is a simple demo project, so what the hell, let's break\n * some rules =D\n */\n\n\n/**\n * Array.prototype.swap\n * Rearrange an array to swap the positions of two elements.\n * @param {Number} a - the index of the first element to swap.\n * @param {Number} b - the index of the second element to swap.\n * @returns {Array}\n * @example\n * // returns [ 'a', 'c', 'b' ]\n * [ 'a', 'b', 'c' ].swap(1, 2)\n */\n// eslint-disable-next-line no-extend-native\nArray.prototype.swap = function (a, b) {\n    if ( b >= this.length || b < 0 ) return this;\n\n    // Temporary variable to hold data while we juggle\n    let temp = this[a];\n    this[a] = this[b];\n    this[b] = temp;\n    return this;\n};\n\n/**\n * Array.range\n * Create a new array of length n, where the elements are numbers\n * from 0 to n - 1.\n * @param {Number} n - the desired length of the range.\n * @returns {Array}\n * @example\n * // returns [ 0, 1, 2, 3 ]\n * Array.range(4);\n */\nArray.range = n => Array.from(new Array(n), (x,i) => i);\n\n/**\n * Array.matrix\n * Create a new two-dimensional array, where each element is its own index.\n * @param {Number} x - the desired number of columns (possible x values)\n * @param {Number} y - the desired number of rows (possible y values)\n * @returns {Array}\n * @example\n * // returns [\n * //   [ 0, 1, 2 ],\n * //   [ 0, 1, 2 ]\n * // ]\n * Array.matrix(3, 2);\n */\nArray.matrix = (x, y) => {\n    const rows = Array.range(y);\n    const columns = Array.range(x);\n    return rows.map( (row, i) => columns.slice() );\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA;AACAA,KAAK,CAACC,SAAS,CAACC,IAAI,CAAG,SAAUC,CAAC,CAAEC,CAAC,CAAE,CACnC,GAAKA,CAAC,EAAI,IAAI,CAACC,MAAM,EAAID,CAAC,CAAG,CAAC,CAAG,MAAO,KAAI,CAE5C;AACA,GAAI,CAAAE,IAAI,CAAG,IAAI,CAACH,CAAC,CAAC,CAClB,IAAI,CAACA,CAAC,CAAC,CAAG,IAAI,CAACC,CAAC,CAAC,CACjB,IAAI,CAACA,CAAC,CAAC,CAAGE,IAAI,CACd,MAAO,KAAI,CACf,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACAN,KAAK,CAACO,KAAK,CAAGC,CAAC,EAAIR,KAAK,CAACS,IAAI,CAAC,GAAI,CAAAT,KAAK,CAACQ,CAAC,CAAC,CAAE,CAACE,CAAC,CAACC,CAAC,GAAKA,CAAC,CAAC,CAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACAX,KAAK,CAACY,MAAM,CAAG,CAACF,CAAC,CAAEG,CAAC,GAAK,CACrB,KAAM,CAAAC,IAAI,CAAGd,KAAK,CAACO,KAAK,CAACM,CAAC,CAAC,CAC3B,KAAM,CAAAE,OAAO,CAAGf,KAAK,CAACO,KAAK,CAACG,CAAC,CAAC,CAC9B,MAAO,CAAAI,IAAI,CAACE,GAAG,CAAE,CAACC,GAAG,CAAEN,CAAC,GAAKI,OAAO,CAACG,KAAK,CAAC,CAAE,CAAC,CAClD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}