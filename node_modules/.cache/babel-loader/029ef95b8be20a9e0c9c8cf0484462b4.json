{"ast":null,"code":"import React,{Component}from'react';import Cells from\"./cells\";import Navbar from\"./navbar\";import Menu from\"./menu\";import{seive}from\"../algorithms/prime\";import Spiral from\"./spiral\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";class Seive extends Component{constructor(){super(...arguments);this.state={number:100,cells:[],isRunning:false,speed:500,primes:[],maxPrime:0,algo:0};this.setAlgo=(pos,val)=>{if(pos===0){this.setState({algo:val});// console.log(this.state.algo);\n}};this.changeSpeed=speed=>{//console.log(typeof speed);\nthis.setState({speed:600-speed*10});};this.handleValueIncease=value=>{this.setState({number:value});if(this.state.algo===0){this.setState({cells:getCells(value),isRunning:false});}// console.log(value);\n};this.handleRefresh=()=>{this.setState({cells:getCells(this.state.number),isRunning:false});};this.startAlgo=()=>{console.log(this.state.algo);if(this.state.algo===0){this.startSeive();}else if(this.state.algo===1){this.startSpiral();}};this.startSpiral=async()=>{let pprimes=seive(this.state.number*100);let primes=[];this.setState({primes:[],maxPrime:pprimes[pprimes.length-1]});let mod=Math.ceil(this.state.number/10);for(let i=0;i<pprimes.length;i++){primes.push(pprimes[i]);if(i%mod===0){this.setState({primes});await sleep(10);}}console.log('done');};this.startSeive=async()=>{this.setState({isRunning:true});const prime=[];for(let i=0;i<=this.state.number;i++){prime.push(1);}prime[0]=prime[1]=0;let changedCells=this.state.cells;let prevCheck=-1;// let counter = 0;\nfor(let i=2;i<=this.state.number;i++){if(prime[i]===1){//   setTimeout(()=>{\nchangedCells=getNewCellPrimeToggled(changedCells,i-1);this.setState({cells:changedCells});//},counter*speed);\nawait sleep(this.state.speed);// counter++;\nfor(let j=i*i;j<=this.state.number;j+=i){//setTimeout(()=>{\nif(prevCheck!==-1){changedCells=getNewCellVisitingToggled(changedCells,prevCheck);}prevCheck=j-1;changedCells=getNewCellCheckToggled(changedCells,j-1);changedCells=getNewCellVisitingToggled(changedCells,prevCheck);this.setState({cells:changedCells});//  },counter*speed);\nawait sleep(this.state.speed);// counter++;\nprime[j]=0;}}}//  setTimeout(()=>{\nchangedCells=getNewCellVisitingToggled(changedCells,prevCheck);this.setState({cells:changedCells,isRunning:false});// },counter*speed);\n};}componentDidMount(){const cells=getCells(this.state.number);this.setState({cells});}render(){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsx(Menu,{onChangeSpeed:this.changeSpeed,onChangeValues:this.handleValueIncease,onVisualize:this.startAlgo,onRefresh:this.handleRefresh,isDisabled:this.state.isRunning,setAlgo:this.setAlgo}),this.state.algo===0&&/*#__PURE__*/_jsx(Cells,{num:this.state.number,cells:this.state.cells}),this.state.algo===1&&/*#__PURE__*/_jsx(Spiral,{num:this.state.number,primes:this.state.primes,maxPrime:this.state.maxPrime})]});}}const getNewCellPrimeToggled=(cells,pos)=>{const newCells=cells.slice();const cell=newCells[pos];const newCell={...cell,isPrime:true};newCells[pos]=newCell;return newCells;};const getNewCellVisitingToggled=(cells,pos)=>{const newCells=cells.slice();const cell=newCells[pos];const newCell={...cell,isVisiting:!cell.isVisiting};newCells[pos]=newCell;return newCells;};const getNewCellCheckToggled=(cells,pos)=>{const newCells=cells.slice();const cell=newCells[pos];const newCell={...cell,isChecking:true};newCells[pos]=newCell;return newCells;};const getCells=rows=>{const cells=[];for(let cell=1;cell<=rows;cell++){cells.push(createCell(cell));}return cells;};const createCell=val=>{return{val,isChecking:false,isVisiting:false,isPrime:false};};function sleep(ms){return new Promise(resolve=>setTimeout(resolve,ms));}export default Seive;","map":{"version":3,"names":["React","Component","Cells","Navbar","Menu","seive","Spiral","jsx","_jsx","jsxs","_jsxs","Seive","constructor","arguments","state","number","cells","isRunning","speed","primes","maxPrime","algo","setAlgo","pos","val","setState","changeSpeed","handleValueIncease","value","getCells","handleRefresh","startAlgo","console","log","startSeive","startSpiral","pprimes","length","mod","Math","ceil","i","push","sleep","prime","changedCells","prevCheck","getNewCellPrimeToggled","j","getNewCellVisitingToggled","getNewCellCheckToggled","componentDidMount","render","children","onChangeSpeed","onChangeValues","onVisualize","onRefresh","isDisabled","num","newCells","slice","cell","newCell","isPrime","isVisiting","isChecking","rows","createCell","ms","Promise","resolve","setTimeout"],"sources":["/Users/amit/Desktop/Algoverse-main/src/primeComponents/seive.jsx"],"sourcesContent":["import React, {Component} from 'react';\nimport Cells from \"./cells\";\nimport Navbar from \"./navbar\";\nimport Menu from \"./menu\";\nimport {seive} from \"../algorithms/prime\";\nimport Spiral from \"./spiral\";\n\nclass Seive extends Component {\n    state = {\n        number: 100,\n        cells:[],\n        isRunning:false,\n        speed:500,\n        primes:[],\n        maxPrime:0,\n        algo:0\n    }\n\n    componentDidMount() {\n        const cells = getCells(this.state.number);\n        this.setState({cells});\n    }\n    setAlgo = (pos, val) => {\n        if (pos === 0) {\n\n            this.setState({algo: val});\n            // console.log(this.state.algo);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar/>\n                <Menu\n                    onChangeSpeed={this.changeSpeed}\n                    onChangeValues={this.handleValueIncease}\n                    onVisualize = {this.startAlgo}\n                    onRefresh = {this.handleRefresh}\n                    isDisabled = {this.state.isRunning}\n                    setAlgo={this.setAlgo}\n                />\n                {this.state.algo === 0 &&\n                    <Cells\n                        num={this.state.number}\n                        cells={this.state.cells}\n                    />\n                }\n                {this.state.algo === 1 &&\n                    <Spiral\n                        num={this.state.number}\n                        primes={this.state.primes}\n                        maxPrime={this.state.maxPrime}\n                    />\n                }\n\n            </div>\n        );\n    }\n\n    changeSpeed = (speed) => {\n        //console.log(typeof speed);\n        this.setState({speed:600-speed*10});\n    }\n    handleValueIncease = (value) => {\n        this.setState({number:value});\n        if( this.state.algo === 0 ){\n            this.setState({cells:getCells(value),isRunning:false});\n\n        }\n        // console.log(value);\n    }\n    handleRefresh = () => {\n        this.setState({cells:getCells(this.state.number),isRunning:false});\n    }\n\n    startAlgo = () =>{\n        console.log(this.state.algo);\n        if( this.state.algo === 0 ){\n            this.startSeive();\n        }else if( this.state.algo === 1 ){\n            this.startSpiral();\n        }\n    }\n    startSpiral = async () =>{\n        let pprimes = seive(this.state.number*100);\n        let primes = [];\n        this.setState({primes:[],maxPrime:pprimes[pprimes.length-1]});\n        let mod = Math.ceil(this.state.number/10);\n        for(let i=0;i<pprimes.length;i++){\n            primes.push(pprimes[i]);\n\n            if( i%mod === 0 ){\n                this.setState({primes});\n                await sleep(10);\n            }\n        }\n        console.log('done');\n    }\n    startSeive = async () => {\n        this.setState({isRunning:true});\n        const prime = [];\n        for(let i = 0;i<=this.state.number;i++){\n            prime.push(1);\n        }\n        prime[0] = prime[1] = 0;\n        let changedCells = this.state.cells;\n        let prevCheck = -1;\n        // let counter = 0;\n        for( let i = 2; i<=this.state.number;i++){\n            if( prime[i] === 1 ){\n             //   setTimeout(()=>{\n                    changedCells = getNewCellPrimeToggled(changedCells,i-1);\n                    this.setState({cells:changedCells});\n                //},counter*speed);\n                await sleep(this.state.speed);\n                // counter++;\n                for(let j = i*i;j<=this.state.number;j+=i){\n                    //setTimeout(()=>{\n                        if( prevCheck!==-1 ){\n                            changedCells = getNewCellVisitingToggled(changedCells,prevCheck);\n                        }\n                        prevCheck = j-1;\n                        changedCells = getNewCellCheckToggled(changedCells,j-1);\n                        changedCells = getNewCellVisitingToggled(changedCells,prevCheck);\n                        this.setState({cells:changedCells});\n                  //  },counter*speed);\n                    await sleep(this.state.speed);\n                    // counter++;\n                    prime[j] = 0;\n                }\n            }\n        }\n      //  setTimeout(()=>{\n            changedCells = getNewCellVisitingToggled(changedCells,prevCheck);\n            this.setState({cells:changedCells,isRunning:false});\n       // },counter*speed);\n    }\n}\n\nconst getNewCellPrimeToggled = (cells,pos) =>{\n    const newCells = cells.slice();\n    const cell = newCells[pos];\n    const newCell = {\n        ...cell,\n        isPrime:true\n    }\n    newCells[pos] = newCell;\n    return newCells;\n}\n\nconst getNewCellVisitingToggled = (cells,pos)=>{\n    const newCells = cells.slice();\n    const cell = newCells[pos];\n    const newCell = {\n        ...cell,\n        isVisiting:!cell.isVisiting\n    }\n    newCells[pos] = newCell;\n    return newCells;\n}\n\nconst getNewCellCheckToggled = (cells,pos) =>{\n    const newCells = cells.slice();\n    const cell = newCells[pos];\n    const newCell = {\n        ...cell,\n        isChecking:true\n    }\n    newCells[pos] = newCell;\n    return newCells;\n}\n\nconst getCells = (rows)=>{\n    const cells = [];\n    for(let cell = 1;cell<=rows;cell++){\n        cells.push(createCell(cell))\n    }\n    return cells;\n}\nconst createCell = (val)=>{\n    return {\n        val,\n        isChecking:false,\n        isVisiting:false,\n        isPrime:false\n    };\n}\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\nexport default Seive;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}