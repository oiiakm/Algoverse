{"ast":null,"code":"/**\n * Swap the positions of two elements in an array.\n * @param {Array} arr - The array to swap elements in.\n * @param {Number} a - The index of the first element.\n * @param {Number} b - The index of the second element.\n * @returns {Array} The array with swapped elements.\n */\nfunction swap(arr, a, b) {\n  if (b >= arr.length || b < 0) return arr;\n\n  // Swap elements\n  let temp = arr[a];\n  arr[a] = arr[b];\n  arr[b] = temp;\n  return arr;\n}\n\n/**\n * Create a range of numbers from 0 to n-1.\n * @param {Number} n - The desired length of the range.\n * @returns {Array} An array of numbers from 0 to n-1.\n */\nfunction range(n) {\n  return Array.from({\n    length: n\n  }, (v, i) => i);\n}\n\n/**\n * Create a matrix (2D array) where each element is its own index.\n * @param {Number} x - The number of columns.\n * @param {Number} y - The number of rows.\n * @returns {Array} A 2D array where each element is its index.\n */\nfunction matrix(x, y) {\n  const rows = range(y);\n  const columns = range(x);\n  return rows.map(() => [...columns]);\n}\n\n// Example usage\nconst arr = ['a', 'b', 'c'];\nconsole.log(swap(arr, 1, 2)); // [ 'a', 'c', 'b' ]\nconsole.log(range(4)); // [ 0, 1, 2, 3 ]\nconsole.log(matrix(3, 2)); // [ [ 0, 1, 2 ], [ 0, 1, 2 ] ]","map":{"version":3,"names":["swap","arr","a","b","length","temp","range","n","Array","from","v","i","matrix","x","y","rows","columns","map","console","log"],"sources":["/Users/amit/Desktop/Algoverse-main/src/helpers/array_helpers.js"],"sourcesContent":["/**\n * Swap the positions of two elements in an array.\n * @param {Array} arr - The array to swap elements in.\n * @param {Number} a - The index of the first element.\n * @param {Number} b - The index of the second element.\n * @returns {Array} The array with swapped elements.\n */\nfunction swap(arr, a, b) {\n    if (b >= arr.length || b < 0) return arr;\n    \n    // Swap elements\n    let temp = arr[a];\n    arr[a] = arr[b];\n    arr[b] = temp;\n    return arr;\n}\n\n/**\n * Create a range of numbers from 0 to n-1.\n * @param {Number} n - The desired length of the range.\n * @returns {Array} An array of numbers from 0 to n-1.\n */\nfunction range(n) {\n    return Array.from({ length: n }, (v, i) => i);\n}\n\n/**\n * Create a matrix (2D array) where each element is its own index.\n * @param {Number} x - The number of columns.\n * @param {Number} y - The number of rows.\n * @returns {Array} A 2D array where each element is its index.\n */\nfunction matrix(x, y) {\n    const rows = range(y);\n    const columns = range(x);\n    return rows.map(() => [...columns]);\n}\n\n// Example usage\nconst arr = [ 'a', 'b', 'c' ];\nconsole.log(swap(arr, 1, 2)); // [ 'a', 'c', 'b' ]\nconsole.log(range(4)); // [ 0, 1, 2, 3 ]\nconsole.log(matrix(3, 2)); // [ [ 0, 1, 2 ], [ 0, 1, 2 ] ]\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAIA,CAACC,GAAG,EAAEC,CAAC,EAAEC,CAAC,EAAE;EACrB,IAAIA,CAAC,IAAIF,GAAG,CAACG,MAAM,IAAID,CAAC,GAAG,CAAC,EAAE,OAAOF,GAAG;;EAExC;EACA,IAAII,IAAI,GAAGJ,GAAG,CAACC,CAAC,CAAC;EACjBD,GAAG,CAACC,CAAC,CAAC,GAAGD,GAAG,CAACE,CAAC,CAAC;EACfF,GAAG,CAACE,CAAC,CAAC,GAAGE,IAAI;EACb,OAAOJ,GAAG;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASK,KAAKA,CAACC,CAAC,EAAE;EACd,OAAOC,KAAK,CAACC,IAAI,CAAC;IAAEL,MAAM,EAAEG;EAAE,CAAC,EAAE,CAACG,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAMA,CAACC,CAAC,EAAEC,CAAC,EAAE;EAClB,MAAMC,IAAI,GAAGT,KAAK,CAACQ,CAAC,CAAC;EACrB,MAAME,OAAO,GAAGV,KAAK,CAACO,CAAC,CAAC;EACxB,OAAOE,IAAI,CAACE,GAAG,CAAC,MAAM,CAAC,GAAGD,OAAO,CAAC,CAAC;AACvC;;AAEA;AACA,MAAMf,GAAG,GAAG,CAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAE;AAC7BiB,OAAO,CAACC,GAAG,CAACnB,IAAI,CAACC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9BiB,OAAO,CAACC,GAAG,CAACb,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvBY,OAAO,CAACC,GAAG,CAACP,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}