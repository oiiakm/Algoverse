{"ast":null,"code":"export function bubbleSort2(rects){const pairs=[];const num=rects.length;const prevRect=rects.slice();for(let i=0;i<num;i++){for(let j=i+1;j<num;j++){if(prevRect[i].width>prevRect[j].width){const recti={...prevRect[i]};const rectj={...prevRect[j]};prevRect[j]=recti;prevRect[i]=rectj;pairs.push({xx:i,yy:j,changed:true});}else{pairs.push({xx:i,yy:j,changed:false});}if(j===num-1){pairs.push({xx:i,yy:i,changed:false});}}}return pairs;}export function selectionSort(arr){const pairs=[];let n=arr.length;const prevRect=arr.slice();// One by one move boundary of unsorted subarray\nfor(let i=0;i<n-1;i++){let min_idx=i;for(let j=i+1;j<n;j++){pairs.push({xx:min_idx,yy:j,changed:false});if(prevRect[j].width<prevRect[min_idx].width){min_idx=j;}}// Swap the found minimum element with the first\n// element\nconst recti={...prevRect[i]};const rectj={...prevRect[min_idx]};prevRect[min_idx]=recti;prevRect[i]=rectj;pairs.push({xx:min_idx,yy:i,changed:true});pairs.push({xx:i,yy:i,changed:false});}pairs.push({xx:n-1,yy:n-1,changed:false});return pairs;}export function bubbleSort(arr){const pairs=[];let n=arr.length;const prevRect=arr.slice();for(let i=0;i<n-1;i++){for(let j=0;j<n-i-1;j++){if(prevRect[j].width>prevRect[j+1].width){// swap arr[j+1] and arr[j]\nconst recti={...prevRect[j]};const rectj={...prevRect[j+1]};prevRect[j+1]=recti;prevRect[j]=rectj;pairs.push({xx:j,yy:j+1,changed:true});}else{pairs.push({xx:j,yy:j+1,changed:false});}if(j===n-i-2){pairs.push({xx:n-i-1,yy:n-i-1,changed:false});}}}pairs.push({xx:0,yy:0,changed:false});return pairs;}export function insertionSort(arr){const pairs=[];let n=arr.length;const prevRect=arr.slice();for(let i=1;i<n;++i){let key=prevRect[i].width;let j=i-1;while(j>=0&&prevRect[j].width>key){const recti={...prevRect[j]};const rectj={...prevRect[j+1]};prevRect[j+1]=recti;prevRect[j]=rectj;pairs.push({xx:j,yy:j+1,changed:true});j=j-1;}// arr[j + 1] = arr[i];\n}for(let i=0;i<n;i++){pairs.push({xx:i,yy:i,changed:true});}return pairs;}","map":{"version":3,"names":["bubbleSort2","rects","pairs","num","length","prevRect","slice","i","j","width","recti","rectj","push","xx","yy","changed","selectionSort","arr","n","min_idx","bubbleSort","insertionSort","key"],"sources":["/Users/amit/Desktop/Algoverse-main/src/algorithms/sortingAlgorithms.js"],"sourcesContent":["export function bubbleSort2(rects ){\n    const pairs = [];\n    const num  = rects.length;\n    const prevRect = rects.slice();\n\n    for( let i = 0; i<num; i++ ){\n        for( let j = i+1;j<num;j++ ){\n            if( prevRect[i].width>prevRect[j].width ){\n                const recti = {...prevRect[i]};\n                const rectj = {...prevRect[j]};\n                prevRect[j] = recti;\n                prevRect[i] = rectj;\n                pairs.push( {\n                    xx:i,\n                    yy:j,\n                    changed:true\n                } );\n            } else{\n                pairs.push( {\n                    xx:i,\n                    yy:j,\n                    changed:false\n                });\n            }\n            if( j === num-1 ){\n                pairs.push( {\n                    xx:i,\n                    yy:i,\n                    changed:false\n                });\n            }\n        }\n    }\n    return pairs;\n}\n\nexport function selectionSort(arr) {\n    const pairs = [];\n    let n = arr.length;\n    const prevRect = arr.slice();\n    // One by one move boundary of unsorted subarray\n    for (let i = 0; i < n-1; i++)\n    {\n        let min_idx = i;\n        for (let j = i+1; j < n; j++){\n            pairs.push( {\n                xx:min_idx,\n                yy:j,\n                changed:false\n            } );\n            if (prevRect[j].width < prevRect[min_idx].width){\n                min_idx = j;\n            }\n        }\n\n        // Swap the found minimum element with the first\n        // element\n        const recti = {...prevRect[i]};\n        const rectj = {...prevRect[min_idx]};\n        prevRect[min_idx] = recti;\n        prevRect[i] = rectj;\n        pairs.push( {\n            xx:min_idx,\n            yy:i,\n            changed:true\n        } );\n        pairs.push( {\n            xx:i,\n            yy:i,\n            changed:false\n        });\n    }\n    pairs.push({\n            xx:n-1,\n            yy:n-1,\n            changed:false\n        }\n    )\n    return pairs;\n}\n\nexport function bubbleSort(arr){\n    const pairs= [];\n    let n = arr.length;\n    const prevRect = arr.slice();\n    for (let i = 0; i < n-1; i++){\n        for (let j = 0; j < n-i-1; j++){\n            if (prevRect[j].width > prevRect[j+1].width) {\n                // swap arr[j+1] and arr[j]\n                const recti = {...prevRect[j]};\n                const rectj = {...prevRect[j+1]};\n                prevRect[j+1] = recti;\n                prevRect[j] = rectj;\n                pairs.push( {\n                    xx:j,\n                    yy:j+1,\n                    changed:true\n                } );\n            } else{\n                pairs.push( {\n                    xx:j,\n                    yy:j+1,\n                    changed:false\n                } );\n            }\n            if( j === n-i-2 ){\n                pairs.push( {\n                    xx:n-i-1,\n                    yy:n-i-1,\n                    changed:false\n                } );\n            }\n        }\n    }\n    pairs.push({\n            xx:0,\n            yy:0,\n            changed:false\n        }\n    )\n    return pairs;\n}\n\nexport function insertionSort(arr){\n    const pairs = [];\n    let n = arr.length;\n    const prevRect = arr.slice();\n    for (let i = 1; i < n; ++i) {\n        let key = prevRect[i].width;\n        let j = i - 1;\n\n        while (j >= 0 && prevRect[j].width > key) {\n            const recti = {...prevRect[j]};\n            const rectj = {...prevRect[j+1]};\n            prevRect[j+1] = recti;\n            prevRect[j] = rectj;\n            pairs.push( {\n                xx:j,\n                yy:j+1,\n                changed:true\n            } );\n            j = j - 1;\n        }\n       // arr[j + 1] = arr[i];\n    }\n    for(let i=0;i<n;i++){\n        pairs.push({\n            xx:i,\n            yy:i,\n            changed:true\n        })\n    }\n    return pairs;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}