{"ast":null,"code":"let values=[];export function quickSortRecursive(rects2){let rects=rects2.slice();values=[];let sz=rects2.length;// console.log( \"fdsfsd\",sz );\nsz=sz-1;quick(rects,0,sz);return values;}function getPartition(rects,left,right){values.push({left,right,swap:false,changedRange:true});let pivot=rects[right].width;let it=left-1;for(var j=left;j<=right-1;j++){if(rects[j].width<pivot){it++;if(it!==j){// swap(rects[it],rects[j];\nconst rect1={...rects[it]};const rect2={...rects[j]};rects[it]=rect2;rects[j]=rect1;values.push({left:it,right:j,swap:true,changedRange:false});}}}if(it+1!==right){const rect1={...rects[it+1]};const rect2={...rects[right]};rects[it+1]=rect2;rects[right]=rect1;values.push({left:it+1,right:right,swap:true,changedRange:false});}return it+1;}function quick(rects,left,right){if(left>=right)return;const partition=getPartition(rects,left,right);quick(rects,left,partition-1);quick(rects,partition+1,right);}","map":{"version":3,"names":["values","quickSortRecursive","rects2","rects","slice","sz","length","quick","getPartition","left","right","push","swap","changedRange","pivot","width","it","j","rect1","rect2","partition"],"sources":["/Users/amit/Desktop/Algoverse-main/src/algorithms/quickSortRecursive.js"],"sourcesContent":["let values = [];\n\nexport function quickSortRecursive(rects2){\n    let rects = rects2.slice();\n    values = [];\n    let sz = rects2.length;\n    // console.log( \"fdsfsd\",sz );\n    sz = sz-1;\n    quick(rects,0,sz);\n    return values;\n}\n\n\nfunction getPartition(rects, left, right){\n    values.push({\n        left,\n        right,\n        swap:false,\n        changedRange:true,\n    })\n    let pivot = rects[right].width\n    let it = left-1;\n    for(var j=left;j<=right-1;j++){\n        if( rects[j].width< pivot){\n            it++;\n            if( it!==j ){\n                // swap(rects[it],rects[j];\n                const rect1 = {...rects[it]};\n                const rect2 = {...rects[j]};\n                rects[it] = rect2;\n                rects[j] = rect1;\n                values.push({\n                    left:it,\n                    right:j,\n                    swap:true,\n                    changedRange:false,\n                })\n            }\n        }\n    }\n    if( it+1!==right ){\n        const rect1 = {...rects[it+1]};\n        const rect2 = {...rects[right]};\n        rects[it+1] = rect2;\n        rects[right] = rect1;\n        values.push({\n            left:it+1,\n            right:right,\n            swap:true,\n            changedRange:false,\n        })\n    }\n    return it+1;\n}\nfunction quick(rects,left,right){\n    if( left>=right ) return ;\n    const partition = getPartition(rects,left,right);\n    quick(rects,left,partition-1);\n    quick(rects,partition+1,right);\n}"],"mappings":"AAAA,GAAI,CAAAA,MAAM,CAAG,EAAE,CAEf,MAAO,SAAS,CAAAC,kBAAkBA,CAACC,MAAM,CAAC,CACtC,GAAI,CAAAC,KAAK,CAAGD,MAAM,CAACE,KAAK,CAAC,CAAC,CAC1BJ,MAAM,CAAG,EAAE,CACX,GAAI,CAAAK,EAAE,CAAGH,MAAM,CAACI,MAAM,CACtB;AACAD,EAAE,CAAGA,EAAE,CAAC,CAAC,CACTE,KAAK,CAACJ,KAAK,CAAC,CAAC,CAACE,EAAE,CAAC,CACjB,MAAO,CAAAL,MAAM,CACjB,CAGA,QAAS,CAAAQ,YAAYA,CAACL,KAAK,CAAEM,IAAI,CAAEC,KAAK,CAAC,CACrCV,MAAM,CAACW,IAAI,CAAC,CACRF,IAAI,CACJC,KAAK,CACLE,IAAI,CAAC,KAAK,CACVC,YAAY,CAAC,IACjB,CAAC,CAAC,CACF,GAAI,CAAAC,KAAK,CAAGX,KAAK,CAACO,KAAK,CAAC,CAACK,KAAK,CAC9B,GAAI,CAAAC,EAAE,CAAGP,IAAI,CAAC,CAAC,CACf,IAAI,GAAI,CAAAQ,CAAC,CAACR,IAAI,CAACQ,CAAC,EAAEP,KAAK,CAAC,CAAC,CAACO,CAAC,EAAE,CAAC,CAC1B,GAAId,KAAK,CAACc,CAAC,CAAC,CAACF,KAAK,CAAED,KAAK,CAAC,CACtBE,EAAE,EAAE,CACJ,GAAIA,EAAE,GAAGC,CAAC,CAAE,CACR;AACA,KAAM,CAAAC,KAAK,CAAG,CAAC,GAAGf,KAAK,CAACa,EAAE,CAAC,CAAC,CAC5B,KAAM,CAAAG,KAAK,CAAG,CAAC,GAAGhB,KAAK,CAACc,CAAC,CAAC,CAAC,CAC3Bd,KAAK,CAACa,EAAE,CAAC,CAAGG,KAAK,CACjBhB,KAAK,CAACc,CAAC,CAAC,CAAGC,KAAK,CAChBlB,MAAM,CAACW,IAAI,CAAC,CACRF,IAAI,CAACO,EAAE,CACPN,KAAK,CAACO,CAAC,CACPL,IAAI,CAAC,IAAI,CACTC,YAAY,CAAC,KACjB,CAAC,CAAC,CACN,CACJ,CACJ,CACA,GAAIG,EAAE,CAAC,CAAC,GAAGN,KAAK,CAAE,CACd,KAAM,CAAAQ,KAAK,CAAG,CAAC,GAAGf,KAAK,CAACa,EAAE,CAAC,CAAC,CAAC,CAAC,CAC9B,KAAM,CAAAG,KAAK,CAAG,CAAC,GAAGhB,KAAK,CAACO,KAAK,CAAC,CAAC,CAC/BP,KAAK,CAACa,EAAE,CAAC,CAAC,CAAC,CAAGG,KAAK,CACnBhB,KAAK,CAACO,KAAK,CAAC,CAAGQ,KAAK,CACpBlB,MAAM,CAACW,IAAI,CAAC,CACRF,IAAI,CAACO,EAAE,CAAC,CAAC,CACTN,KAAK,CAACA,KAAK,CACXE,IAAI,CAAC,IAAI,CACTC,YAAY,CAAC,KACjB,CAAC,CAAC,CACN,CACA,MAAO,CAAAG,EAAE,CAAC,CAAC,CACf,CACA,QAAS,CAAAT,KAAKA,CAACJ,KAAK,CAACM,IAAI,CAACC,KAAK,CAAC,CAC5B,GAAID,IAAI,EAAEC,KAAK,CAAG,OAClB,KAAM,CAAAU,SAAS,CAAGZ,YAAY,CAACL,KAAK,CAACM,IAAI,CAACC,KAAK,CAAC,CAChDH,KAAK,CAACJ,KAAK,CAACM,IAAI,CAACW,SAAS,CAAC,CAAC,CAAC,CAC7Bb,KAAK,CAACJ,KAAK,CAACiB,SAAS,CAAC,CAAC,CAACV,KAAK,CAAC,CAClC","ignoreList":[]},"metadata":{},"sourceType":"module"}