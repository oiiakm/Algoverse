{"ast":null,"code":"export function getMaze(board,row,col){const pairs=[];let newBoard=board.slice();for(let i=0;i<col;i++){newBoard[0][i].isWall=true;pairs.push({xx:0,yy:i});}for(let i=0;i<row;i++){newBoard[i][col-1].isWall=true;pairs.push({xx:i,yy:col-1});}for(let i=col-1;i>=0;i--){newBoard[row-1][i].isWall=true;pairs.push({xx:row-1,yy:i});}for(let i=row-1;i>=0;i--){newBoard[i][0].isWall=true;pairs.push({xx:i,yy:0});}decideMaze(pairs,newBoard,1,row-2,1,col-2);//console.log(\"here\");\nreturn pairs;}function decideMaze(pairs,board,startRow,endRow,startCol,endCol){//console.log(\"count\");\nif(endRow-startRow<=1&&endCol-startCol<=1){return;}if(endCol-startCol>endRow-startRow){recursiveMazeVertical(pairs,board,startRow,endRow,startCol,endCol);}else{recursiveMazeHorizontal(pairs,board,startRow,endRow,startCol,endCol);}}function recursiveMazeVertical(pairs,board,startRow,endRow,startCol,endCol){let mid=Math.floor((endCol+startCol)/2);let random=Math.floor(Math.random()*(endRow-startRow+1))+startRow;//console.log( \"row \",random,\" \",startRow,\" \",endRow );\nlet start=startRow;if(!board[startRow-1][mid].isWall){random=start;start++;}let end=endRow;if(!board[endRow+1][mid].isWall){random=end;end--;}for(let i=start;i<=end;i++){if(i!==random){board[i][mid].isWall=true;pairs.push({xx:i,yy:mid});}}decideMaze(pairs,board,startRow,endRow,startCol,mid-1);decideMaze(pairs,board,startRow,endRow,mid+1,endCol);}function recursiveMazeHorizontal(pairs,board,startRow,endRow,startCol,endCol){let mid=Math.floor((endRow+startRow)/2);//  console.log(\"mid: \",mid);\nlet random=Math.floor(Math.random()*(endCol-startCol+1))+startCol;let start=startCol;if(!board[mid][startCol-1].isWall){random=start;start++;}let end=endCol;if(!board[mid][endCol+1].isWall){random=end;end--;}for(let i=start;i<=end;i++){if(i!==random){board[mid][i].isWall=true;pairs.push({xx:mid,yy:i});}}decideMaze(pairs,board,startRow,mid-1,startCol,endCol);decideMaze(pairs,board,mid+1,endRow,startCol,endCol);}","map":{"version":3,"names":["getMaze","board","row","col","pairs","newBoard","slice","i","isWall","push","xx","yy","decideMaze","startRow","endRow","startCol","endCol","recursiveMazeVertical","recursiveMazeHorizontal","mid","Math","floor","random","start","end"],"sources":["/Users/amit/Desktop/Algoverse-main/src/algorithms/recursiveMaze.js"],"sourcesContent":["export function getMaze(board,row,col){\n    const pairs = [];\n    let newBoard = board.slice();\n    for( let i = 0;i <col;i++){\n        newBoard[0][i].isWall = true;\n        pairs.push({\n            xx:0,\n            yy:i\n        });\n    }\n    for( let i = 0;i <row;i++){\n        newBoard[i][col-1].isWall = true;\n        pairs.push({\n            xx:i,\n            yy:col-1\n        });\n    }\n    for( let i = col-1;i>=0;i-- ){\n        newBoard[row-1][i].isWall = true;\n        pairs.push({\n            xx:row-1,\n            yy:i\n        });\n    }\n    for(let i = row-1;i>=0;i--){\n        newBoard[i][0].isWall = true;\n        pairs.push({\n            xx:i,\n            yy:0\n        });\n    }\n    decideMaze(pairs,newBoard,1,row-2,1,col-2);\n    //console.log(\"here\");\n    return pairs;\n}\nfunction decideMaze(pairs,board,startRow,endRow,startCol,endCol) {\n    //console.log(\"count\");\n\n    if( ((endRow-startRow) <=1) && ((endCol - startCol) <=1) ){\n        return;\n    }\n\n     if( (endCol - startCol) > (endRow - startRow) ){\n        recursiveMazeVertical(pairs,board,startRow,endRow,startCol,endCol);\n    } else{\n        recursiveMazeHorizontal(pairs,board,startRow,endRow,startCol,endCol);\n    }\n}\nfunction recursiveMazeVertical(pairs,board,startRow,endRow,startCol,endCol){\n    let mid = Math.floor((endCol+startCol)/2);\n    let random = Math.floor(Math.random() * (endRow-startRow+1)) + startRow;\n    //console.log( \"row \",random,\" \",startRow,\" \",endRow );\n    let start = startRow;\n    if( !board[startRow-1][mid].isWall ){\n        random = start;\n        start++;\n    }\n    let end = endRow;\n    if( !board[endRow+1][mid].isWall ){\n        random = end;\n        end--;\n    }\n    for(let i = start;i<=end;i++){\n        if( i!==random ){\n            board[i][mid].isWall = true;\n            pairs.push({\n                xx:i,\n                yy:mid\n            });\n        }\n    }\n    decideMaze(pairs,board,startRow,endRow,startCol,mid-1);\n    decideMaze(pairs,board,startRow,endRow,mid+1,endCol);\n}\nfunction recursiveMazeHorizontal(pairs,board,startRow,endRow,startCol,endCol){\n    let mid = Math.floor((endRow+startRow)/2);\n  //  console.log(\"mid: \",mid);\n    let random = Math.floor(Math.random() * (endCol-startCol+1)) + startCol;\n    let start = startCol;\n    if( !board[mid][startCol-1].isWall ){\n        random = start;\n        start++;\n    }\n    let end = endCol;\n    if( !board[mid][endCol+1].isWall ){\n        random = end;\n        end--;\n    }\n    for(let i = start;i<=end;i++){\n        if( i!==random ){\n            board[mid][i].isWall = true;\n            pairs.push({\n                xx:mid,\n                yy:i\n            });\n        }\n    }\n    decideMaze(pairs,board,startRow,mid-1,startCol,endCol);\n    decideMaze(pairs,board,mid+1,endRow,startCol,endCol);\n\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}