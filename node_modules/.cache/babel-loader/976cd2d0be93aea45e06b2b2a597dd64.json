{"ast":null,"code":"import graph from \"./images/graph.png\";\nimport primes from \"./images/primes.jpg\";\nimport sort from \"./sort.png\";\nimport queen from \"./images/queen.PNG\";\nimport binSearch from \"./images/binaryTree.png\";\nimport convex from './images/convexHull.png';\nimport puzzle from './images/15puzzle.PNG';\nimport turing from './images/turing.jpg';\nimport Recursion from './images/Recursion.jpg';\nexport function getDetails() {\n  return [{\n    id: 1,\n    title: \"Pathfinder\",\n    description: \"Visualize graph algorithms like dijkstra, BFS, DFS\",\n    route: \"/pathfinder\",\n    img: graph\n  },\n  //    {\n  //        id:2,\n  //        title:\"Recursion Tree\",\n  //        description:\"The process in which a function calls itself directly or indirectly is called recursion. Work in progress\",\n  //        route:\"/graph\",\n  //        img:Recursion\n  //    },\n  {\n    id: 3,\n    title: \"Sorting Algorithm\",\n    description: \"Compare different sorting algorithms\",\n    route: \"/sort\",\n    img: sort\n  },\n  //    {\n  //        id:4,\n  //        title:\"Recursive Sorting\",\n  //        description:\"Compare different recursive sorting algorithms\",\n  //        route:\"/recursivesort\",\n  //        img:sort\n  //    },\n  {\n    id: 5,\n    title: \"N Queen\",\n    description: \"The N queens puzzle is the problem of placing N chess queens on an N*N chessboard so that no two queens threaten each other\",\n    route: \"/nqueen\",\n    img: queen\n  },\n  //    {\n  //        id:6,\n  //        title:\"Turing Machine\",\n  //        description:\"A Turing machine is a mathematical model of computation that defines an abstract machine that manipulates symbols on a strip of tape according to a table of rules\",\n  //        route:\"/turing\",\n  //        img:turing\n  //    },\n  //    {\n  //        id:7,\n  //        title:\"Prime Numbers\",\n  //        description:\"Visualize how Seive is better than brute force\",\n  //        route:\"/prime\",\n  //        img:primes\n  //    },\n  //    {\n  //        id:8,\n  //        title:\"Convex Hull\",\n  //        description:\"The convex hull of a set of points is the smallest convex polygon that contains all the points of it\",\n  //        route:\"/convexhull\",\n  //        img:convex\n  //    },\n  {\n    id: 9,\n    title: \"Binary Search\",\n    description: \"Binary search is an efficient algorithm for finding an item from a sorted list of item\",\n    route: \"/binarysearch\",\n    img: binSearch\n  }, {\n    id: 10,\n    title: \"15 Puzzle\",\n    description: \"The 15 puzzle is a sliding puzzle having 15 square tiles numbered 1–15 in a frame that is 4 tiles high and 4 tiles wide, leaving one unoccupied tile position\",\n    route: \"/15puzzle\",\n    img: puzzle\n  }];\n}","map":{"version":3,"names":["graph","primes","sort","queen","binSearch","convex","puzzle","turing","Recursion","getDetails","id","title","description","route","img"],"sources":["/Users/amit/Learning/Algoverse/src/homeComponents/cardDetails.js"],"sourcesContent":["import graph from \"./images/graph.png\";\nimport primes from \"./images/primes.jpg\";\nimport sort from \"./sort.png\";\nimport queen from \"./images/queen.PNG\";\nimport binSearch from \"./images/binaryTree.png\";\nimport convex from './images/convexHull.png';\nimport puzzle from './images/15puzzle.PNG';\nimport turing from './images/turing.jpg';\nimport Recursion from './images/Recursion.jpg';\nexport function getDetails(){\n   return [\n       {\n           id:1,\n           title:\"Pathfinder\",\n           description:\"Visualize graph algorithms like dijkstra, BFS, DFS\",\n           route:\"/pathfinder\",\n           img:graph\n       },\n    //    {\n    //        id:2,\n    //        title:\"Recursion Tree\",\n    //        description:\"The process in which a function calls itself directly or indirectly is called recursion. Work in progress\",\n    //        route:\"/graph\",\n    //        img:Recursion\n    //    },\n       {\n           id:3,\n           title:\"Sorting Algorithm\",\n           description:\"Compare different sorting algorithms\",\n           route:\"/sort\",\n           img:sort\n       },\n    //    {\n    //        id:4,\n    //        title:\"Recursive Sorting\",\n    //        description:\"Compare different recursive sorting algorithms\",\n    //        route:\"/recursivesort\",\n    //        img:sort\n    //    },\n       {\n           id:5,\n           title:\"N Queen\",\n           description:\"The N queens puzzle is the problem of placing N chess queens on an N*N chessboard so that no two queens threaten each other\",\n           route:\"/nqueen\",\n           img:queen\n       },\n    //    {\n    //        id:6,\n    //        title:\"Turing Machine\",\n    //        description:\"A Turing machine is a mathematical model of computation that defines an abstract machine that manipulates symbols on a strip of tape according to a table of rules\",\n    //        route:\"/turing\",\n    //        img:turing\n    //    },\n    //    {\n    //        id:7,\n    //        title:\"Prime Numbers\",\n    //        description:\"Visualize how Seive is better than brute force\",\n    //        route:\"/prime\",\n    //        img:primes\n    //    },\n    //    {\n    //        id:8,\n    //        title:\"Convex Hull\",\n    //        description:\"The convex hull of a set of points is the smallest convex polygon that contains all the points of it\",\n    //        route:\"/convexhull\",\n    //        img:convex\n    //    },\n       {\n           id:9,\n           title:\"Binary Search\",\n           description:\"Binary search is an efficient algorithm for finding an item from a sorted list of item\",\n           route:\"/binarysearch\",\n           img:binSearch\n       },\n       {\n           id:10,\n           title:\"15 Puzzle\",\n           description:\"The 15 puzzle is a sliding puzzle having 15 square tiles numbered 1–15 in a frame that is 4 tiles high and 4 tiles wide, leaving one unoccupied tile position\",\n           route:\"/15puzzle\",\n           img:puzzle\n       }\n\n   ]\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,oBAAoB;AACtC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAO,SAASC,UAAUA,CAAA,EAAE;EACzB,OAAO,CACH;IACIC,EAAE,EAAC,CAAC;IACJC,KAAK,EAAC,YAAY;IAClBC,WAAW,EAAC,oDAAoD;IAChEC,KAAK,EAAC,aAAa;IACnBC,GAAG,EAACd;EACR,CAAC;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACG;IACIU,EAAE,EAAC,CAAC;IACJC,KAAK,EAAC,mBAAmB;IACzBC,WAAW,EAAC,sCAAsC;IAClDC,KAAK,EAAC,OAAO;IACbC,GAAG,EAACZ;EACR,CAAC;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACG;IACIQ,EAAE,EAAC,CAAC;IACJC,KAAK,EAAC,SAAS;IACfC,WAAW,EAAC,6HAA6H;IACzIC,KAAK,EAAC,SAAS;IACfC,GAAG,EAACX;EACR,CAAC;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACG;IACIO,EAAE,EAAC,CAAC;IACJC,KAAK,EAAC,eAAe;IACrBC,WAAW,EAAC,wFAAwF;IACpGC,KAAK,EAAC,eAAe;IACrBC,GAAG,EAACV;EACR,CAAC,EACD;IACIM,EAAE,EAAC,EAAE;IACLC,KAAK,EAAC,WAAW;IACjBC,WAAW,EAAC,+JAA+J;IAC3KC,KAAK,EAAC,WAAW;IACjBC,GAAG,EAACR;EACR,CAAC,CAEJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module"}