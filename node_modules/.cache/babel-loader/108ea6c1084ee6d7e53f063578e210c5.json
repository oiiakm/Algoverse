{"ast":null,"code":"export function bfsdfs(grid,startNode,endNode,algo){var list=[];const nodesInOrder=[];nodesInOrder.push(startNode);list.push(startNode);startNode.isVisited=true;while(!!list.length){const currentNode=algo===\"bfs\"?list.shift():list.pop();nodesInOrder.push(currentNode);if(currentNode===endNode)return nodesInOrder;if(algo===\"dfs\")currentNode.isVisited=true;const nodesToPush=getNeighbours(grid,currentNode);for(const node of nodesToPush){if(algo===\"bfs\"){node.isVisited=true;}node.previousNode=currentNode;list.push(node);}}return nodesInOrder;}function getNeighbours(grid,node){const neighbors=[];const{col,row}=node;// console.log(node);\nif(col>0)neighbors.push(grid[row][col-1]);if(row>0)neighbors.push(grid[row-1][col]);if(row<grid.length-1)neighbors.push(grid[row+1][col]);if(col<grid[0].length-1)neighbors.push(grid[row][col+1]);return neighbors.filter(neighbor=>!neighbor.isVisited&&!neighbor.isWall);}","map":{"version":3,"names":["bfsdfs","grid","startNode","endNode","algo","list","nodesInOrder","push","isVisited","length","currentNode","shift","pop","nodesToPush","getNeighbours","node","previousNode","neighbors","col","row","filter","neighbor","isWall"],"sources":["/Users/amit/Desktop/Algoverse-main/src/algorithms/bfs.jsx"],"sourcesContent":["export function bfsdfs(grid,startNode,endNode,algo){\n    var list = [];\n    const nodesInOrder = [];\n    nodesInOrder.push(startNode);\n    list.push(startNode);\n    startNode.isVisited = true;\n    while(!!list.length){\n        const currentNode = (algo === \"bfs\" ? list.shift():list.pop());\n        nodesInOrder.push(currentNode);\n        if( currentNode === endNode ) return nodesInOrder;\n        if( algo === \"dfs\" ) currentNode.isVisited = true;\n        const nodesToPush = getNeighbours(grid,currentNode);\n        for( const node of nodesToPush ){\n            if(algo === \"bfs\"){\n                node.isVisited = true;\n            }\n            node.previousNode = currentNode;\n            list.push(node);\n\n        }\n    }\n    return nodesInOrder;\n}\n\nfunction getNeighbours(grid,node){\n    const neighbors = [];\n    const {col, row} = node;\n   // console.log(node);\n\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => (!neighbor.isVisited && !neighbor.isWall ));\n}"],"mappings":"AAAA,MAAO,SAAS,CAAAA,MAAMA,CAACC,IAAI,CAACC,SAAS,CAACC,OAAO,CAACC,IAAI,CAAC,CAC/C,GAAI,CAAAC,IAAI,CAAG,EAAE,CACb,KAAM,CAAAC,YAAY,CAAG,EAAE,CACvBA,YAAY,CAACC,IAAI,CAACL,SAAS,CAAC,CAC5BG,IAAI,CAACE,IAAI,CAACL,SAAS,CAAC,CACpBA,SAAS,CAACM,SAAS,CAAG,IAAI,CAC1B,MAAM,CAAC,CAACH,IAAI,CAACI,MAAM,CAAC,CAChB,KAAM,CAAAC,WAAW,CAAIN,IAAI,GAAK,KAAK,CAAGC,IAAI,CAACM,KAAK,CAAC,CAAC,CAACN,IAAI,CAACO,GAAG,CAAC,CAAE,CAC9DN,YAAY,CAACC,IAAI,CAACG,WAAW,CAAC,CAC9B,GAAIA,WAAW,GAAKP,OAAO,CAAG,MAAO,CAAAG,YAAY,CACjD,GAAIF,IAAI,GAAK,KAAK,CAAGM,WAAW,CAACF,SAAS,CAAG,IAAI,CACjD,KAAM,CAAAK,WAAW,CAAGC,aAAa,CAACb,IAAI,CAACS,WAAW,CAAC,CACnD,IAAK,KAAM,CAAAK,IAAI,GAAI,CAAAF,WAAW,CAAE,CAC5B,GAAGT,IAAI,GAAK,KAAK,CAAC,CACdW,IAAI,CAACP,SAAS,CAAG,IAAI,CACzB,CACAO,IAAI,CAACC,YAAY,CAAGN,WAAW,CAC/BL,IAAI,CAACE,IAAI,CAACQ,IAAI,CAAC,CAEnB,CACJ,CACA,MAAO,CAAAT,YAAY,CACvB,CAEA,QAAS,CAAAQ,aAAaA,CAACb,IAAI,CAACc,IAAI,CAAC,CAC7B,KAAM,CAAAE,SAAS,CAAG,EAAE,CACpB,KAAM,CAACC,GAAG,CAAEC,GAAG,CAAC,CAAGJ,IAAI,CACxB;AAEC,GAAIG,GAAG,CAAG,CAAC,CAAED,SAAS,CAACV,IAAI,CAACN,IAAI,CAACkB,GAAG,CAAC,CAACD,GAAG,CAAG,CAAC,CAAC,CAAC,CAC/C,GAAIC,GAAG,CAAG,CAAC,CAAEF,SAAS,CAACV,IAAI,CAACN,IAAI,CAACkB,GAAG,CAAG,CAAC,CAAC,CAACD,GAAG,CAAC,CAAC,CAC/C,GAAIC,GAAG,CAAGlB,IAAI,CAACQ,MAAM,CAAG,CAAC,CAAEQ,SAAS,CAACV,IAAI,CAACN,IAAI,CAACkB,GAAG,CAAG,CAAC,CAAC,CAACD,GAAG,CAAC,CAAC,CAC7D,GAAIA,GAAG,CAAGjB,IAAI,CAAC,CAAC,CAAC,CAACQ,MAAM,CAAG,CAAC,CAAEQ,SAAS,CAACV,IAAI,CAACN,IAAI,CAACkB,GAAG,CAAC,CAACD,GAAG,CAAG,CAAC,CAAC,CAAC,CAChE,MAAO,CAAAD,SAAS,CAACG,MAAM,CAACC,QAAQ,EAAK,CAACA,QAAQ,CAACb,SAAS,EAAI,CAACa,QAAQ,CAACC,MAAQ,CAAC,CACnF","ignoreList":[]},"metadata":{},"sourceType":"module"}